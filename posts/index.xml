<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Outro blog nerd</title><link>https://www.thiagohenrique.com.br/posts/</link><description>Recent content in Posts on Outro blog nerd</description><generator>Hugo -- gohugo.io</generator><copyright>Creative Commons by 4.0</copyright><lastBuildDate>Sun, 28 Feb 2021 00:09:33 -0300</lastBuildDate><atom:link href="https://www.thiagohenrique.com.br/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Entendendo os Operators no k8s</title><link>https://www.thiagohenrique.com.br/posts/k8s-operator-o-que-voce-precisa-saber-antes-de-comecar/</link><pubDate>Sun, 28 Feb 2021 00:09:33 -0300</pubDate><guid>https://www.thiagohenrique.com.br/posts/k8s-operator-o-que-voce-precisa-saber-antes-de-comecar/</guid><description>&lt;h1 id="atenção-este-artigo-ainda-está-incompleto-logo-mais-finalizo-">ATENÇÃO: ESTE ARTIGO AINDA ESTÁ INCOMPLETO. LOGO MAIS FINALIZO! :)&lt;/h1>&lt;p>Neste artigo serão apresentados conceitos necessários para que você consiga desenvolver um Kubernetes Operator, compreendendo o que de fato ele é e como funciona.&lt;/p>&lt;p>O conteúdo aqui parte do principio que você já entenda ao menos os objetos básicos do Kubernetes &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, bem como saiba utilizar o &lt;code>kubectl&lt;/code>, e claro, saiba o que é o Kubernetes.&lt;/p>&lt;h2 id="arquitetura-do-kubernetes">Arquitetura do Kubernetes&lt;/h2>&lt;p>O Kubernetes não possui uma arquitetura monolítica. Ao invés disto, ele é composto de uma série de componentes de software independentes que se conectam entre si para fazer todo seu maquinário funcionar. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>&lt;h2 id="afinal-o-que-são-_operators_-">Afinal, o que são &lt;em>Operators&lt;/em> ?&lt;/h2>&lt;p>&lt;em>Operators&lt;/em> são um meio através do qual você pode estender o Kubernetes para fazê-lo atender a alguma necessidade específica a qual o mesmo não faça nativamente. A principal motivação para se criar um &lt;em>Operator&lt;/em> é realizar a automação um trabalho repetitivo e complexo dentro do próprio Kubernetes. &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>&lt;p>Para tornar o entendimento mais &amp;ldquo;palpável&amp;rdquo;, imagine que você possui um sistema de banco de dados executando dentro do Kubernetes, para o qual você precisa subir e descer constantemente réplicas que são utilizadas para exploração de dados, além de gerenciar os usuários que podem acessar estes bancos de dados.&lt;/p>&lt;p>A criação de um &lt;em>Operator&lt;/em> poderia viabilizar a execução desta tarefa de uma forma simples e automatizada, permitindo que você gerencie dentro do próprio Kubernetes as suas instâncias de banco de dados, bem como os usuários contidos nele.&lt;/p>&lt;p>Imagine que, após criar um &lt;em>Operator&lt;/em> que automatize todas estas tarefas, seria possível criar uma réplica e um novo usuário no Kubernetes somente por enviar os YAML como estes abaixo:&lt;/p>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">---&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">database.example.com/v1&lt;/span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">DatabaseReplica&lt;/span>&lt;span style="color:#f92672">metadata&lt;/span>: &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-replica-database&lt;/span>&lt;span style="color:#f92672">spec&lt;/span>: &lt;span style="color:#f92672">master&lt;/span>: &lt;span style="color:#ae81ff">name-of-my-master&lt;/span>---&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">database.example.com/v1&lt;/span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">DatabaseUser&lt;/span>&lt;span style="color:#f92672">spec&lt;/span>: &lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">my-username&lt;/span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#f92672">secretRef&lt;/span>: &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">secret-with-password&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>O processo de operação das réplicas e usuários se tornaria mais fácil, pois ao invés de reproduzir uma série de passos complexos e especializados, bastaria realizar o envio destes YAML ao Kubernetes, que se encarregaria de executar os passos por meio do &lt;em>Operator&lt;/em>.&lt;/p>&lt;p>Além disto, por meio do Operator teríamos a possíbilidade de gerir estas réplicas e usuários por meio do &lt;code>kubectl&lt;/code>, uma vez que o &lt;em>Operator&lt;/em> criaria recursos na API do Kubernetes para tal.&lt;/p>&lt;p>Ou seja, você poderia listar todos seus usuários por meio de um &lt;code>kubectl get database-users&lt;/code>, ou réplicas através de um &lt;code>kubectl get database-replicas&lt;/code>.&lt;/p>&lt;h2 id="como-o-kubernetes-funciona">Como o Kubernetes funciona?&lt;/h2>&lt;p>Para entender como um &lt;em>Operator&lt;/em> funciona no Kubernetes, entender a arquitetura do próprio Kubernetes é fundamental.&lt;/p>&lt;hr>&lt;p>O Kubernetes é notóriamente um sistema distribuído completo e complexo, com uma série de componentes que interagem entre si para fazer o maquinário inteiro funcionar. Em sistemas como este é esperado que hajam sincronizações constantes e geralmente assíncronas em suas entidades internas, no caso, os objetos do Kubernetes. &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/p>&lt;p>No Kubernetes, a orquestração destas sincronizações é realizada por um componente chamado Control Plane, este por sua vez sendo composto por uma série de outros componentes menores.&lt;/p>&lt;hr>&lt;p>O Control Plane é um dos componentes centrais do Kubernetes, que por sua vez é composto por uma série de componentes menores, dentre os quais está incluso o &lt;em>kube-apiserver&lt;/em>, que é basicamente a aplicação que expõe a API do Kubernetes para todo e qualquer &lt;em>client&lt;/em> que vá interagir com o Cluster, entre eles o próprio kubectl.&lt;/p>&lt;p>Ao receber um pedido de alteração no cluster (por exemplo, criação de um novo Pod), a API não é responsável por aplicá-la, e sim simplesmente validá-la e posteriormente armazenar a alteração desejada para que outro componente possa posteriormente aplicá-la: O Controller.&lt;/p>&lt;h2 id="mãos-na-massa">Mãos na massa&lt;/h2>&lt;!-- raw HTML omitted -->&lt;section class="footnotes" role="doc-endnotes">&lt;hr>&lt;ol>&lt;li id="fn:1" role="doc-endnote">&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/">Understanding Kubernetes Objects&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:2" role="doc-endnote">&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/overview/components/">Kubernetes Components&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:3" role="doc-endnote">&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">Extending Kubernetes: Operator pattern&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:4" role="doc-endnote">&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/">Understanding Kubernetes Objects&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:5" role="doc-endnote">&lt;p>&lt;a href="https://www.redhat.com/pt-br/resources/oreilly-kubernetes-operators-automation-ebook">Dobies, J., &amp;amp;; Wood, J. (2020). Kubernetes operators: Automating the container orchestration platform. Beijing ; O&amp;rsquo;Reilly.&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;/ol>&lt;/section></description></item></channel></rss>